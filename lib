#region init

MotorB.IsLarge()
MotorC.IsLarge() 
' моторы большие, которые колёсики

Sensor.SetMode(2,3)'Датчики света
Sensor.SetMode(3,3)'режим работы датчиков

file = EV3File.OpenRead("calibration.txt")

Lmin = EV3File.ConvertToNumber(EV3File.ReadLine(file))
Lmax = EV3File.ConvertToNumber(EV3File.ReadLine(file))
Rmin = EV3File.ConvertToNumber(EV3File.ReadLine(file))
Rmax = EV3File.ConvertToNumber(EV3File.ReadLine(file))

kp = 0.8
kd = 8
lasterror = 0

D = 5.6
L = 12.9

#endregion
Function Reset()
  MotorB.ResetCount()
  MotorC.ResetCount()
EndFunction
''''значение цвета от 0 ддо 100
Function readcalibrated(in number port, out number data)
  If port = 2 Then
    data = (Sensor2.Raw1()-@Lmax)/(@Lmin-@Lmax)*100
  ELseIf port = 3 Then
    data = (Sensor3.Raw1()-@Rmax)/(@Rmin-@Rmax)*100
  EndIf
  
  If data > 100 Then
    data = 100
  EndIf
  
  If data < 0 Then 
    data = 0
  EndIf
  
EndFunction
'''' врум-врум по линии
Function PDline(in number speed)
  readcalibrated(2,@s2)
  readcalibrated(3,@s3)
  
  error = @s2 - @s3
  
  upr = @kp * error + @kd * (error - @lasterror)
  
  MotorB.StartPower(speed+upr)
  MotorC.StartPower(speed-upr)
  
  @lasterror = error
  
  Program.Delay(0.001)
EndFunction

'''' врум-врум на заданное расстояние
Function line_encoder(in number speed, in number distance)
  distance = Math.Round(distance * 360 / (Math.pi * @D))
  
  Reset
  encoder = (Math.Abs(MotorB.GetTacho())+Math.Abs(MotorC.GetTacho()))/2
  
  While encoder < distance
    encoder = (Math.Abs(MotorB.GetTacho())+Math.Abs(MotorC.GetTacho()))/2
    PDline(speed)
  EndWhile
  
  MotorBC.OffAndBrake()
EndFunction

'''' виды торможения
''''0 - не останавливаться
''''1 - простая остановка
''''2 - остановка на перекрёстке
Function stop(in number stop, in number proezd)
  If stop = 1 Then 
    MotorBC.OffAndBrake()
  EndIf
  If stop = 2 Then
    Reset()
    encoder = (Math.Abs(MotorB.GetTacho())+Math.Abs(MotorC.GetTacho()))/2
    proezd = Math.Round(proezd * 360 / (Math.pi * @D))
    While encoder<proezd
      Motor.StartSync("8C",20,20)
      encoder = (Math.Abs(MotorB.GetTacho())+Math.Abs(MotorC.GetTacho()))/2
    EndWhile
    MotorBC.OffAndBrake()
    Program.Delay(200)
  EndIf
EndFunction

''''находит перекрёсток
''''speed - скорость
''''proezd - съезд с линии после обнаружения перекрёстка(для поворота) в см
''''start - корректировочный проезд в начале движения в см
''''stop - тип остановки 
Function line_perekrestok(in number speed, in number proezd, in number start, in number stop)
  If start>0 Then
    line_encoder(speed/2, start)
  EndIf
  
  Reset()
  encoder = (Math.Abs(MotorB.GetTacho())+Math.Abs(MotorC.GetTacho()))/2
  
  while @s2+@s3>30 or encoder<100 
    encoder = (Math.Abs(MotorB.GetTacho())+Math.Abs(MotorC.GetTacho()))/2
    PDline(speed)
  EndWhile
  
  Speaker.Tone(95, 1500, 50)
  stop(stop, proezd)
EndFunction

''''поворот по градусам
Function TurnDegrees(in number speed, in number degrees)
  side = degrees / Math.Abs(degrees)
  degrees = @L * Math.Abs(degrees) / @D
  
  Reset()
  cur_enc = (Math.Abs(MotorB.GetTacho())+Math.Abs(MotorC.GetTacho()))/2
  
  While cur_enc < degrees
    Motor.StartSync("BC", speed*side, speed*-1*side)
    cur_enc = (Math.Abs(MotorB.GetTacho())+Math.Abs(MotorC.GetTacho()))/2
  EndWhile
  
  MotorBC.OffAndBrake()
  
EndFunction

Function turn(in number speed, in number degrees)
  side = degrees / Math.Abs(degrees)
  port = 3-(side+1)/2
  degrees = @L * Math.Abs(degrees) / @D
  start_distance = degreea - 50 
  Reset()
  cur_enc = (Math.Abs(MotorB.GetTacho())+Math.Abs(MotorC.GetTacho()))/2

  err_old = 0
  While cur_enc < start_distance 
    b = MotorB.GetTacho()
    c = MotorC.GetTacho()
    cur_enc = (Math.Abs(b)+Math.Abs(c))/2
  EndWhile
  While Vd > 5-
    readcalibrated(port, Vd)
    Motor.StartSync("BC", speed*side, speed*-1*side)
  EndWhile
  
  err_old = 0
  Time.Reset1()
  While Time.Get1()<60
    readcalibrated(2, @s2)
    readcalibrated(3, @s3)
    err = @s2 - @s3
    upr = 3 * err + 4*(err-err_old)
    err_old = err
    MotorB.StartPower(upr)
    MotorC.StartPower(-upr)
  EndWhile
  MotorBC.OffAndBrake()
EndFunction      
